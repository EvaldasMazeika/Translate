@model Translation

@inject translate.web.Resources.LocService SharedLocalizer

<a class="btn btn-info" asp-controller="Project" asp-action="Index"><i class="fa fa-angle-double-left"></i> @SharedLocalizer.GetLocalizedHtmlString("goBackButton")</a>
<button type="button" class="btn btn-dark" data-toggle="modal" data-target="#downloadModal">Parsisiųsti dokumentą</button>
<button type="button" id="newWordPanel" class="btn btn-success">Naujas žodis</button>
<hr />
<div class="row">
    <div class="col-md-2">
        <h2>@Model.Title</h2>
    </div>
    <div class="col-md-4">
        <p style="margin-bottom: 0px;">@SharedLocalizer.GetLocalizedHtmlString("translatingFrom"): <strong>@ViewBag.language</strong></p>
        <p style="margin-bottom: 0px;">@SharedLocalizer.GetLocalizedHtmlString("translatingTo"): <strong>@Model.Language.Name</strong></p>
    </div>
    @if (Model.DeclineComment != null)
    {
        <div class="col-md-3">
            <h5 class="text-danger">@Model.DeclineComment</h5>
        </div>
    }
</div>

<hr />
<div class="row">
    <div id="editorList" class="col-md-4">
        @await Component.InvokeAsync("WordsList", new EditorListViewModel { Id = Model.Id, PageIndex = 1 })
    </div>
    <div id="editor" class="col-md-8">

    </div>
    <div class="wait col-md-6 offset-md-3" style="display:none">
    </div>

</div>


<div class="modal fade" id="downloadModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="downloadModalLabel">New message</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="recipient-name" class="col-form-label">Pavadinimas:</label>
                        <input type="text" class="form-control" id="nameTitle">
                    </div>
                    <div class="form-group">
                        <label for="message-text" class="col-form-label">Dokumento tipas:</label>
                        <select id="typeDoc" class="form-control" asp-items="ViewBag.DocumentTypeId"></select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="downloadBtn" type="button" class="btn btn-primary">Parsisiųsti</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        jQuery(document).ajaxStart(function () {
            jQuery(".wait").css("display", "block");
        });
        jQuery(document).ajaxComplete(function () {
            jQuery(".wait").css("display", "none");
        });

        jQuery("#newWordPanel").click(function () {
            jQuery("#editor").load("/Project/@Model.ProjectId/GetNewWordAsync?id=@Model.Id");
        });

        jQuery('#editorList').on('click', 'button', function (e) {
            var button = e.currentTarget;
            var key = button.getAttribute("data-key");
            var pr = button.getAttribute("data-pr");
            jQuery("#editor").load("/Project/" + pr + "/GetEditorAsync?id=" + key);
        });

        jQuery('#editorList').on('click', 'a', function (e) {
            e.preventDefault();
        var button = e.currentTarget;
        var pageIndex = button.getAttribute("data-page");
        var type = button.id;
        var backIndex = parseInt(jQuery('#goBack').attr("data-page"));
        var forwardIndex = parseInt(jQuery('#goForward').attr("data-page"));

        if (type == 'goBack') {
            jQuery('#editorList').load("/Project/@Model.ProjectId/GetEditorListAsync?id=" + '@Model.Id' + '&PageIndex=' + backIndex, function () {
                jQuery('#goBack').attr("data-page", backIndex - 1);
                jQuery('#goForward').attr("data-page", forwardIndex - 1);
             });

        } else if (type == 'goForward') {
            jQuery('#editorList').load("/Project/@Model.ProjectId/GetEditorListAsync?id=" + '@Model.Id' + '&PageIndex=' + forwardIndex, function () {
                jQuery('#goBack').attr("data-page", backIndex + 1);
                jQuery('#goForward').attr("data-page", forwardIndex + 1);
             });

        }

     });


                jQuery('#downloadBtn').click(function (e) {
            e.preventDefault();
            if (jQuery('#nameTitle').val().length > 0) {
                var title = jQuery('#nameTitle').val();
                var extId = jQuery('#typeDoc').val();

                window.location = '/Project/@Model.ProjectId/DownloadTranslationAsync?Id=@Model.Id&Title=' + title + '&ExtensionId=' + extId ;

            }


         });
    </script>
}
